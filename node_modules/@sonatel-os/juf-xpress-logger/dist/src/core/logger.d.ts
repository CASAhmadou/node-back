/**
 * LoggerService
 * A service class for logging requests, responses, and custom events. Provides mechanisms to sanitize logs, manage log destinations, and interact with observability tools.
 * @class
 * @example
 * const loggerService = LoggerService.bootstrap({
 *   appName: 'MyApp',
 *   crypt: ['password', 'authorization'],
 *   logConsole: true,
 *   logDir: './logs',
 *   constantFileName: false,
 *   findLogFile: (path) => `Custom action for ${path}`
 * });
 * loggerService.writeLog({
 *   params: {
 *     logFrom: '192.168.1.1',
 *     userIp: '10.0.0.1',
 *     method: 'POST',
 *     payload: JSON.stringify({ username: 'john_doe', password: 'secret' }),
 *     headers: JSON.stringify({ 'user-agent': 'Mozilla/5.0' }),
 *     logTarget: '/api/login',
 *     userAgent: 'Mozilla/5.0',
 *     logStatus: 200,
 *     logStatusCode: 'OK'
 *   },
 *   userName: 'john_doe',
 *   logLevel: 'INFO',
 *   action: 'User login',
 *   duration: 500
 * });
 */
export class LoggerService {
    /**
     * Constructs an instance of LoggerService.
     * @constructor
     * @param {object} options - Options for initializing the logger service.
     * @param {string} [options.appName='app'] - Application name for log identification.
     * @param {Array<string>} [options.crypt=[]] - List of keys to mask in the log data.
     * @param {boolean} [options.logConsole=true] - Whether to log to the console.
     * @param {string} options.logDir - Directory path to save log files if `logConsole` is false.
     * @param {boolean} [options.constantFileName=false] - Whether to use a constant file name for logs.
     * @param {Function} [options.findLogFile] - Function to determine a custom log action.
     * @param {string} [options.logLevel='info'] - Log level for APM configuration.
     * @param {boolean} [options.startApmAgent=false] - Whether to start the APM agent.
     * @throws {Error} Throws error if APM or logger initialization fails.
     */
    constructor({ appName, crypt, logConsole, logDir, constantFileName, findLogFile, logLevel, startApmAgent }: {
        appName?: string | undefined;
        crypt?: string[] | undefined;
        logConsole?: boolean | undefined;
        logDir: string;
        constantFileName?: boolean | undefined;
        findLogFile?: Function | undefined;
        logLevel?: string | undefined;
        startApmAgent?: boolean | undefined;
    });
    /**
     * Factory method to bootstrap and initialize a new instance of LoggerService with provided configuration.
     *
     * @memberof Core\Logger
     * @param {object} config - Configuration options for LoggerService.
     * @param {string} [config.appName='app'] - Application name for log identification.
     * @param {Array<string>} [config.crypt=[]] - List of keys to mask in the log data.
     * @param {boolean} [config.logConsole=true] - Whether to log to the console.
     * @param {string} config.logDir - Directory path to save log files if `logConsole` is false.
     * @param {boolean} [config.constantFileName=false] - Whether to use a constant file name for logs.
     * @param {Function} [config.findLogFile] - Function to determine a custom log action.
     * @param {string} [config.logLevel='info'] - Log level for APM configuration.
     * @param {boolean} [config.startApmAgent=false] - Whether to start the APM agent.
     * @returns {LoggerService} - An instance of LoggerService.
     * @example
     * logger.bootstrap({
     *   appName: 'MyApp',
     *   crypt: ['password', 'authorization'],
     *   logConsole: false,
     *   logDir: './logs'
     * });
     */
    bootstrap({ appName, crypt, logConsole, logDir, constantFileName, findLogFile, logLevel, startApmAgent }: {
        appName?: string | undefined;
        crypt?: string[] | undefined;
        logConsole?: boolean | undefined;
        logDir: string;
        constantFileName?: boolean | undefined;
        findLogFile?: Function | undefined;
        logLevel?: string | undefined;
        startApmAgent?: boolean | undefined;
    }): LoggerService;
    /**
     * Captures APM data and handles middleware execution for performance monitoring.
     *
     * @memberof Core\Logger
     * @param {object} config - Configuration for APM capture.
     * @param {object} config.params - Parameters for the request.
     * @param {string} config.params.path - The path of the request.
     * @param {string} config.params.method - The HTTP method of the request.
     * @param {object} config.params.headers - The headers of the request.
     * @param {object|undefined} config.params.routeParams - The route parameters of the request.
     * @param {object|undefined} config.params.queryParams - The query parameters of the request.
     * @param {object|undefined} [config.params.payload] - The request payload.
     * @param {Function} config.callback - Callback function to be executed after middleware processing.
     * @param {object} config.httpListener - HTTP listener object with response handling functions.
     * @param {Function} config.httpListener.onFunction - Function that listens to HTTP events (e.g., 'finish').
     * @param {Function} config.httpListener.callback - Callback function to execute after the listener function.
     * @throws {Error} Throws error if APM middleware encounters an issue.
     * @example
     * logger.captureApmMiddleware({
     *   params: { path: '/api/test', method: 'GET', headers: {} },
     *   callback: (err) => console.error(err),
     *   httpListener: { onFunction: res.on, callback: () => console.log('Finished') },
     * });
     */
    captureApmMiddleware({ params, callback, httpListener }: {
        params: {
            path: string;
            method: string;
            headers: object;
            routeParams: object | undefined;
            queryParams: object | undefined;
            payload?: object | undefined;
        };
        callback: Function;
        httpListener: {
            onFunction: Function;
            callback: Function;
        };
    }): void;
    /**
     * Transaction span management object for beginning and ending APM transaction spans.
     *
     * @memberof Core\Logger
     * @property {Function<name: string>}} begin - Starts a new transaction span.
     * @property {Function} end - Ends an existing transaction span.
     * @example
     * const span1 = logger.transactionSpans.begin({ name: 'Processing Request', type: 'db' });
     * // Perform operations
     * logger.transactionSpans.end(span1);
    */
    transactionSpans: {
        /**
         * Starts a new transaction span.
         * {@link transactionSpans}
         * @param {object} options - Options for starting the span.
         * @param {string} options.name - The name of the span.
         * @param {string} [options.type='external'] - The type of the span (e.g., 'db', 'external').
         * @param {object} [options.payload] - The paylad attached to the span.
         * @returns {Object|null} - Returns the created span object or null if creation fails.
         * @example
         * const span = logger.transactionSpans.begin({ name: 'API Call', type: 'external' });
         * @returns {object} - Returns the created span object or null if none found
        */
        begin: ({ name, type, payload }: {
            name: string;
            type?: string | undefined;
            payload?: object | undefined;
        }) => Object | null;
        /**
         * Ends an existing transaction span.
         *
         * @param {object} transactionSpan - The span object to be ended.
         * @throws {Error} Throws error if the span cannot be ended.
         * @example
         * logger.transactionSpans.end(span);
         */
        end: (transactionSpan: object) => void;
    };
    /**
     * Writes a log entry using the configured logger instance. Supports logging to the console or file based on the configuration.
     * Handles structured logging with sensitive data masking, custom actions, and optional duration tracking.
     *
     * @memberof Core\Logger
     * @param {object} options - Options for logging.
     * @param {object} options.params - Log parameters including request and response details.
     * @param {string} options.params.logFrom - The origin IP address of the log entry.
     * @param {string} options.params.userIp - The user's IP address for the log entry.
     * @param {string} options.params.method - The HTTP method of the request (e.g., 'GET', 'POST').
     * @param {Object|string} options.params.payload - The request body content, can be an object or a stringified JSON.
     * @param {Object|string} options.params.headers - The request headers, can be an object or a stringified JSON.
     * @param {string} options.params.logTarget - The target URL of the log entry.
     * @param {string} options.params.userAgent - The User-Agent header string.
     * @param {number} options.params.logStatus - The HTTP status code of the response.
     * @param {string} options.params.logStatusCode - The HTTP status message (e.g., 'OK', 'Not Found').
     * @param {string} [options.userName='anonymousUser'] - The username associated with the log entry.
     * @param {string} [options.logLevel='INFO'] - The log level (e.g., 'INFO', 'ERROR', 'WARN').
     * @param {string} options.action - A brief description of the action being logged.
     * @param {number} [options.duration] - Optional duration in milliseconds for how long the action took to complete.
     * @throws {Error} Throws an error if logging fails due to invalid input or processing errors.
     * @example
     * // Example of using the writeLog method to log a user login action
     * logger.writeLog({
     *   params: {
     *     logFrom: '192.168.1.1',  // Origin IP address of the request
     *     userIp: '10.0.0.1',  // IP address of the user making the request
     *     method: 'POST',  // HTTP method of the request
     *     payload: { username: 'john_doe', password: 'secret' },  // Request body content
     *     headers: { 'user-agent': 'Mozilla/5.0' },  // Request headers
     *     logTarget: '/api/login',  // Target URL of the request
     *     userAgent: 'Mozilla/5.0',  // User-Agent header
     *     logStatus: 200,  // HTTP status code of the response
     *     logStatusCode: 'OK'  // HTTP status message of the response
     *   },
     *   userName: 'john_doe',  // The username associated with this log entry
     *   logLevel: 'INFO',  // The log level
     *   action: 'User login',  // Description of the action being logged
     *   duration: 500  // Duration in milliseconds for the action
     * });
     */
    writeLog({ params, userName, logLevel, action, duration }: {
        params: {
            logFrom: string;
            userIp: string;
            method: string;
            payload: Object | string;
            headers: Object | string;
            logTarget: string;
            userAgent: string;
            logStatus: number;
            logStatusCode: string;
        };
        userName?: string | undefined;
        logLevel?: string | undefined;
        action: string;
        duration?: number | undefined;
    }): void;
    #private;
}
